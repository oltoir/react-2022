{"version":3,"file":"static/js/13.469d706e.chunk.js","mappings":"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","sources":["components/PageTitle/index.jsx","../node_modules/@chakra-ui/react-use-merge-refs/dist/index.esm.js","../node_modules/@chakra-ui/button/dist/index.esm.js","pages/Account/libs/ProfileCard/libs/AvatarAndName.jsx","pages/Account/libs/ProfileCard/index.jsx","pages/Account/index.jsx"],"sourcesContent":["import { Text} from \"@chakra-ui/react\";\n\nexport function PageTitle({ title }){\n    return(\n        <Text fontSize='24px' lineHeight='32px' fontWeight='bold' color='gray.900'>\n            {title}\n        </Text>\n    )\n}","// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport {\n  assignRef,\n  mergeRefs,\n  useMergeRefs\n};\n","// ../../../react-shim.js\nimport React from \"react\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport {\n  chakra as chakra3,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\nvar dataAttr = (condition) => condition ? \"\" : void 0;\n\n// src/button.tsx\nimport { useMemo as useMemo2 } from \"react\";\n\n// src/button-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\n\n// src/button-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { cloneElement, isValidElement } from \"react\";\nfunction ButtonIcon(props) {\n  const { children, className, ...rest } = props;\n  const _children = isValidElement(children) ? cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n  const _className = cx(\"chakra-button__icon\", className);\n  return /* @__PURE__ */ React.createElement(chakra.span, {\n    display: \"inline-flex\",\n    alignSelf: \"center\",\n    flexShrink: 0,\n    ...rest,\n    className: _className\n  }, _children);\n}\nButtonIcon.displayName = \"ButtonIcon\";\n\n// src/button-spinner.tsx\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nfunction ButtonSpinner(props) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = /* @__PURE__ */ React.createElement(Spinner, {\n      color: \"currentColor\",\n      width: \"1em\",\n      height: \"1em\"\n    }),\n    className,\n    __css,\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__spinner\", className);\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  const spinnerStyles = useMemo(() => ({\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? spacing : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\",\n    ...__css\n  }), [__css, label, marginProp, spacing]);\n  return /* @__PURE__ */ React.createElement(chakra2.div, {\n    className: _className,\n    ...rest,\n    __css: spinnerStyles\n  }, children);\n}\nButtonSpinner.displayName = \"ButtonSpinner\";\n\n// src/use-button-type.tsx\nimport { useCallback, useState } from \"react\";\nfunction useButtonType(value) {\n  const [isButton, setIsButton] = useState(!value);\n  const refCallback = useCallback((node) => {\n    if (!node)\n      return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  const type = isButton ? \"button\" : void 0;\n  return { ref: refCallback, type };\n}\n\n// src/button.tsx\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", { ...group, ...props });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo2(() => {\n    const _focus = { ...styles == null ? void 0 : styles[\"_focus\"], zIndex: 1 };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...!!group && { _focus }\n    };\n  }, [styles, group]);\n  const { ref: _ref, type: defaultType } = useButtonType(as);\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children };\n  return /* @__PURE__ */ React.createElement(chakra3.button, {\n    disabled: isDisabled || isLoading,\n    ref: useMergeRefs(ref, _ref),\n    as,\n    type: type ?? defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className),\n    ...rest\n  }, isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */ React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--start\",\n    label: loadingText,\n    placement: \"start\",\n    spacing: iconSpacing\n  }, spinner), isLoading ? loadingText || /* @__PURE__ */ React.createElement(chakra3.span, {\n    opacity: 0\n  }, /* @__PURE__ */ React.createElement(ButtonContent, {\n    ...contentProps\n  })) : /* @__PURE__ */ React.createElement(ButtonContent, {\n    ...contentProps\n  }), isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */ React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--end\",\n    label: loadingText,\n    placement: \"end\",\n    spacing: iconSpacing\n  }, spinner));\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props;\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, leftIcon && /* @__PURE__ */ React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), children, rightIcon && /* @__PURE__ */ React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n}\n\n// src/button-group.tsx\nimport {\n  chakra as chakra4,\n  forwardRef as forwardRef2\n} from \"@chakra-ui/system\";\nimport { useMemo as useMemo3 } from \"react\";\nvar attachedStyles = {\n  horizontal: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderEndRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderStartRadius: 0 }\n  },\n  vertical: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderBottomRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderTopRadius: 0 }\n  }\n};\nvar gapStyles = {\n  horizontal: (spacing) => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginStart: spacing }\n  }),\n  vertical: (spacing) => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginTop: spacing }\n  })\n};\nvar ButtonGroup = forwardRef2(function ButtonGroup2(props, ref) {\n  const {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled,\n    orientation = \"horizontal\",\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__group\", className);\n  const context = useMemo3(() => ({ size, colorScheme, variant, isDisabled }), [size, colorScheme, variant, isDisabled]);\n  let groupStyles = {\n    display: \"inline-flex\",\n    ...isAttached ? attachedStyles[orientation] : gapStyles[orientation](spacing)\n  };\n  const isVertical = orientation === \"vertical\";\n  return /* @__PURE__ */ React.createElement(ButtonGroupProvider, {\n    value: context\n  }, /* @__PURE__ */ React.createElement(chakra4.div, {\n    ref,\n    role: \"group\",\n    __css: groupStyles,\n    className: _className,\n    \"data-attached\": isAttached ? \"\" : void 0,\n    \"data-orientation\": orientation,\n    flexDir: isVertical ? \"column\" : void 0,\n    ...rest\n  }));\n});\nButtonGroup.displayName = \"ButtonGroup\";\n\n// src/icon-button.tsx\nimport { forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nimport { cloneElement as cloneElement2, isValidElement as isValidElement2 } from \"react\";\nvar IconButton = forwardRef3((props, ref) => {\n  const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props;\n  const element = icon || children;\n  const _children = isValidElement2(element) ? cloneElement2(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n  return /* @__PURE__ */ React.createElement(Button, {\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : void 0,\n    ref,\n    \"aria-label\": ariaLabel,\n    ...rest\n  }, _children);\n});\nIconButton.displayName = \"IconButton\";\nexport {\n  Button,\n  ButtonGroup,\n  ButtonSpinner,\n  IconButton,\n  useButtonGroup\n};\n","import {Box, Image, Text} from \"@chakra-ui/react\";\n\nexport function AvatarAndName({name, avatar, data}){\n    return(\n        <Box>\n            <Image src={avatar} alt={name} width='112px' height='112px' borderRadius='10px'/>\n            <Text color='gray.900' mt='12px' textStyle='xl' fontWeightSemibold>{name}</Text>\n            <Text color='gray.900' mt='12px' textStyle='sm' fontWeightSemibold>{data}</Text>\n        </Box>\n    )\n}","import {Button, Flex} from \"@chakra-ui/react\";\nimport {AvatarAndName} from \"pages/Account/libs/ProfileCard/libs/AvatarAndName\";\n\nexport function ProfileCard(){\n    return(\n        <Flex border='1px solid' borderColor='gray.200' borderRadius='10px' w='100%' p='16px' backgroundColor='white'\n        justifyContent='space-between'\n        >\n            <AvatarAndName name='Altair'\n                           avatar='https://leonardo.osnova.io/6546c668-de90-50de-b56e-a65ae9e7bbba/-/format/webp/'\n            data='ФИТ, 3 курс, 20B030308'\n            />\n            <Flex gap='12px'>\n            <Button variant='secondary'>Настройки</Button>\n            <Button>Написать</Button>\n            </Flex>\n        </Flex>\n    )\n}","import {Box} from \"@chakra-ui/react\";\nimport {PageTitle} from \"components/PageTitle/index\";\nimport { ProfileCard} from \"pages/Account/libs/ProfileCard/index\";\n\nfunction AccountPage(){\n    return(\n        <Box p='32px'>\n            <PageTitle title='Мой аккаунт'/>\n            <ProfileCard/>\n        </Box>\n    )\n}\n\nexport default AccountPage"],"names":["PageTitle","title","fontSize","lineHeight","fontWeight","color","assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach","useMergeRefs","useMemo","cx","classNames","filter","Boolean","join","dataAttr","condition","createContext","strict","name","ButtonGroupProvider","useButtonGroup","ButtonIcon","props","children","className","rest","_children","isValidElement","cloneElement","focusable","_className","React","chakra","display","alignSelf","flexShrink","ButtonSpinner","label","placement","spacing","Spinner","width","height","__css","marginProp","spinnerStyles","alignItems","position","chakra2","displayName","Button","forwardRef","group","styles","useStyleConfig","omitThemingProps","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","as","buttonStyles","useMemo2","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","useState","isButton","setIsButton","useCallback","tagName","useButtonType","_ref","defaultType","contentProps","chakra3","disabled","opacity","ButtonContent","marginEnd","marginStart","attachedStyles","horizontal","borderEndRadius","borderRadius","borderStartRadius","vertical","borderBottomRadius","borderTopRadius","gapStyles","marginTop","forwardRef2","size","colorScheme","variant","isAttached","orientation","context","useMemo3","groupStyles","isVertical","chakra4","role","flexDir","forwardRef3","icon","isRound","ariaLabel","element","isValidElement2","cloneElement2","padding","AvatarAndName","avatar","data","src","alt","mt","textStyle","fontWeightSemibold","ProfileCard","border","borderColor","w","p","backgroundColor","gap"],"sourceRoot":""}